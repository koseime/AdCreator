/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.kosei.adcreator.api;

import org.apache.commons.lang3.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PreviewInfo implements org.apache.thrift.TBase<PreviewInfo, PreviewInfo._Fields>, java.io.Serializable, Cloneable, Comparable<PreviewInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PreviewInfo");

  private static final org.apache.thrift.protocol.TField PRODUCT_BLOB_FIELD_DESC = new org.apache.thrift.protocol.TField("productBlob", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BACKGROUND_BLOB_FIELD_DESC = new org.apache.thrift.protocol.TField("backgroundBlob", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGO_BLOB_FIELD_DESC = new org.apache.thrift.protocol.TField("logoBlob", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AD_ENTRY_JSON_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("adEntryJsonString", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COPY_FIELD_DESC = new org.apache.thrift.protocol.TField("copy", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PreviewInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PreviewInfoTupleSchemeFactory());
  }

  private ByteBuffer productBlob; // required
  private ByteBuffer backgroundBlob; // required
  private ByteBuffer logoBlob; // required
  private String adEntryJsonString; // required
  private String title; // required
  private String copy; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PRODUCT_BLOB((short)1, "productBlob"),
    BACKGROUND_BLOB((short)2, "backgroundBlob"),
    LOGO_BLOB((short)3, "logoBlob"),
    AD_ENTRY_JSON_STRING((short)4, "adEntryJsonString"),
    TITLE((short)5, "title"),
    COPY((short)6, "copy");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_BLOB
          return PRODUCT_BLOB;
        case 2: // BACKGROUND_BLOB
          return BACKGROUND_BLOB;
        case 3: // LOGO_BLOB
          return LOGO_BLOB;
        case 4: // AD_ENTRY_JSON_STRING
          return AD_ENTRY_JSON_STRING;
        case 5: // TITLE
          return TITLE;
        case 6: // COPY
          return COPY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_BLOB, new org.apache.thrift.meta_data.FieldMetaData("productBlob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.BACKGROUND_BLOB, new org.apache.thrift.meta_data.FieldMetaData("backgroundBlob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.LOGO_BLOB, new org.apache.thrift.meta_data.FieldMetaData("logoBlob", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.AD_ENTRY_JSON_STRING, new org.apache.thrift.meta_data.FieldMetaData("adEntryJsonString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COPY, new org.apache.thrift.meta_data.FieldMetaData("copy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PreviewInfo.class, metaDataMap);
  }

  public PreviewInfo() {
  }

  public PreviewInfo(
    ByteBuffer productBlob,
    ByteBuffer backgroundBlob,
    ByteBuffer logoBlob,
    String adEntryJsonString,
    String title,
    String copy)
  {
    this();
    this.productBlob = productBlob;
    this.backgroundBlob = backgroundBlob;
    this.logoBlob = logoBlob;
    this.adEntryJsonString = adEntryJsonString;
    this.title = title;
    this.copy = copy;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PreviewInfo(PreviewInfo other) {
    if (other.isSetProductBlob()) {
      this.productBlob = org.apache.thrift.TBaseHelper.copyBinary(other.productBlob);
;
    }
    if (other.isSetBackgroundBlob()) {
      this.backgroundBlob = org.apache.thrift.TBaseHelper.copyBinary(other.backgroundBlob);
;
    }
    if (other.isSetLogoBlob()) {
      this.logoBlob = org.apache.thrift.TBaseHelper.copyBinary(other.logoBlob);
;
    }
    if (other.isSetAdEntryJsonString()) {
      this.adEntryJsonString = other.adEntryJsonString;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetCopy()) {
      this.copy = other.copy;
    }
  }

  public PreviewInfo deepCopy() {
    return new PreviewInfo(this);
  }

  @Override
  public void clear() {
    this.productBlob = null;
    this.backgroundBlob = null;
    this.logoBlob = null;
    this.adEntryJsonString = null;
    this.title = null;
    this.copy = null;
  }

  public byte[] getProductBlob() {
    setProductBlob(org.apache.thrift.TBaseHelper.rightSize(productBlob));
    return productBlob == null ? null : productBlob.array();
  }

  public ByteBuffer bufferForProductBlob() {
    return productBlob;
  }

  public void setProductBlob(byte[] productBlob) {
    setProductBlob(productBlob == null ? (ByteBuffer)null : ByteBuffer.wrap(productBlob));
  }

  public void setProductBlob(ByteBuffer productBlob) {
    this.productBlob = productBlob;
  }

  public void unsetProductBlob() {
    this.productBlob = null;
  }

  /** Returns true if field productBlob is set (has been assigned a value) and false otherwise */
  public boolean isSetProductBlob() {
    return this.productBlob != null;
  }

  public void setProductBlobIsSet(boolean value) {
    if (!value) {
      this.productBlob = null;
    }
  }

  public byte[] getBackgroundBlob() {
    setBackgroundBlob(org.apache.thrift.TBaseHelper.rightSize(backgroundBlob));
    return backgroundBlob == null ? null : backgroundBlob.array();
  }

  public ByteBuffer bufferForBackgroundBlob() {
    return backgroundBlob;
  }

  public void setBackgroundBlob(byte[] backgroundBlob) {
    setBackgroundBlob(backgroundBlob == null ? (ByteBuffer)null : ByteBuffer.wrap(backgroundBlob));
  }

  public void setBackgroundBlob(ByteBuffer backgroundBlob) {
    this.backgroundBlob = backgroundBlob;
  }

  public void unsetBackgroundBlob() {
    this.backgroundBlob = null;
  }

  /** Returns true if field backgroundBlob is set (has been assigned a value) and false otherwise */
  public boolean isSetBackgroundBlob() {
    return this.backgroundBlob != null;
  }

  public void setBackgroundBlobIsSet(boolean value) {
    if (!value) {
      this.backgroundBlob = null;
    }
  }

  public byte[] getLogoBlob() {
    setLogoBlob(org.apache.thrift.TBaseHelper.rightSize(logoBlob));
    return logoBlob == null ? null : logoBlob.array();
  }

  public ByteBuffer bufferForLogoBlob() {
    return logoBlob;
  }

  public void setLogoBlob(byte[] logoBlob) {
    setLogoBlob(logoBlob == null ? (ByteBuffer)null : ByteBuffer.wrap(logoBlob));
  }

  public void setLogoBlob(ByteBuffer logoBlob) {
    this.logoBlob = logoBlob;
  }

  public void unsetLogoBlob() {
    this.logoBlob = null;
  }

  /** Returns true if field logoBlob is set (has been assigned a value) and false otherwise */
  public boolean isSetLogoBlob() {
    return this.logoBlob != null;
  }

  public void setLogoBlobIsSet(boolean value) {
    if (!value) {
      this.logoBlob = null;
    }
  }

  public String getAdEntryJsonString() {
    return this.adEntryJsonString;
  }

  public void setAdEntryJsonString(String adEntryJsonString) {
    this.adEntryJsonString = adEntryJsonString;
  }

  public void unsetAdEntryJsonString() {
    this.adEntryJsonString = null;
  }

  /** Returns true if field adEntryJsonString is set (has been assigned a value) and false otherwise */
  public boolean isSetAdEntryJsonString() {
    return this.adEntryJsonString != null;
  }

  public void setAdEntryJsonStringIsSet(boolean value) {
    if (!value) {
      this.adEntryJsonString = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getCopy() {
    return this.copy;
  }

  public void setCopy(String copy) {
    this.copy = copy;
  }

  public void unsetCopy() {
    this.copy = null;
  }

  /** Returns true if field copy is set (has been assigned a value) and false otherwise */
  public boolean isSetCopy() {
    return this.copy != null;
  }

  public void setCopyIsSet(boolean value) {
    if (!value) {
      this.copy = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRODUCT_BLOB:
      if (value == null) {
        unsetProductBlob();
      } else {
        setProductBlob((ByteBuffer)value);
      }
      break;

    case BACKGROUND_BLOB:
      if (value == null) {
        unsetBackgroundBlob();
      } else {
        setBackgroundBlob((ByteBuffer)value);
      }
      break;

    case LOGO_BLOB:
      if (value == null) {
        unsetLogoBlob();
      } else {
        setLogoBlob((ByteBuffer)value);
      }
      break;

    case AD_ENTRY_JSON_STRING:
      if (value == null) {
        unsetAdEntryJsonString();
      } else {
        setAdEntryJsonString((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case COPY:
      if (value == null) {
        unsetCopy();
      } else {
        setCopy((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_BLOB:
      return getProductBlob();

    case BACKGROUND_BLOB:
      return getBackgroundBlob();

    case LOGO_BLOB:
      return getLogoBlob();

    case AD_ENTRY_JSON_STRING:
      return getAdEntryJsonString();

    case TITLE:
      return getTitle();

    case COPY:
      return getCopy();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_BLOB:
      return isSetProductBlob();
    case BACKGROUND_BLOB:
      return isSetBackgroundBlob();
    case LOGO_BLOB:
      return isSetLogoBlob();
    case AD_ENTRY_JSON_STRING:
      return isSetAdEntryJsonString();
    case TITLE:
      return isSetTitle();
    case COPY:
      return isSetCopy();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PreviewInfo)
      return this.equals((PreviewInfo)that);
    return false;
  }

  public boolean equals(PreviewInfo that) {
    if (that == null)
      return false;

    boolean this_present_productBlob = true && this.isSetProductBlob();
    boolean that_present_productBlob = true && that.isSetProductBlob();
    if (this_present_productBlob || that_present_productBlob) {
      if (!(this_present_productBlob && that_present_productBlob))
        return false;
      if (!this.productBlob.equals(that.productBlob))
        return false;
    }

    boolean this_present_backgroundBlob = true && this.isSetBackgroundBlob();
    boolean that_present_backgroundBlob = true && that.isSetBackgroundBlob();
    if (this_present_backgroundBlob || that_present_backgroundBlob) {
      if (!(this_present_backgroundBlob && that_present_backgroundBlob))
        return false;
      if (!this.backgroundBlob.equals(that.backgroundBlob))
        return false;
    }

    boolean this_present_logoBlob = true && this.isSetLogoBlob();
    boolean that_present_logoBlob = true && that.isSetLogoBlob();
    if (this_present_logoBlob || that_present_logoBlob) {
      if (!(this_present_logoBlob && that_present_logoBlob))
        return false;
      if (!this.logoBlob.equals(that.logoBlob))
        return false;
    }

    boolean this_present_adEntryJsonString = true && this.isSetAdEntryJsonString();
    boolean that_present_adEntryJsonString = true && that.isSetAdEntryJsonString();
    if (this_present_adEntryJsonString || that_present_adEntryJsonString) {
      if (!(this_present_adEntryJsonString && that_present_adEntryJsonString))
        return false;
      if (!this.adEntryJsonString.equals(that.adEntryJsonString))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_copy = true && this.isSetCopy();
    boolean that_present_copy = true && that.isSetCopy();
    if (this_present_copy || that_present_copy) {
      if (!(this_present_copy && that_present_copy))
        return false;
      if (!this.copy.equals(that.copy))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_productBlob = true && (isSetProductBlob());
    builder.append(present_productBlob);
    if (present_productBlob)
      builder.append(productBlob);

    boolean present_backgroundBlob = true && (isSetBackgroundBlob());
    builder.append(present_backgroundBlob);
    if (present_backgroundBlob)
      builder.append(backgroundBlob);

    boolean present_logoBlob = true && (isSetLogoBlob());
    builder.append(present_logoBlob);
    if (present_logoBlob)
      builder.append(logoBlob);

    boolean present_adEntryJsonString = true && (isSetAdEntryJsonString());
    builder.append(present_adEntryJsonString);
    if (present_adEntryJsonString)
      builder.append(adEntryJsonString);

    boolean present_title = true && (isSetTitle());
    builder.append(present_title);
    if (present_title)
      builder.append(title);

    boolean present_copy = true && (isSetCopy());
    builder.append(present_copy);
    if (present_copy)
      builder.append(copy);

    return builder.toHashCode();
  }

  @Override
  public int compareTo(PreviewInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProductBlob()).compareTo(other.isSetProductBlob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductBlob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productBlob, other.productBlob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBackgroundBlob()).compareTo(other.isSetBackgroundBlob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBackgroundBlob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backgroundBlob, other.backgroundBlob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLogoBlob()).compareTo(other.isSetLogoBlob());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLogoBlob()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.logoBlob, other.logoBlob);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdEntryJsonString()).compareTo(other.isSetAdEntryJsonString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdEntryJsonString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adEntryJsonString, other.adEntryJsonString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCopy()).compareTo(other.isSetCopy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCopy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.copy, other.copy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PreviewInfo(");
    boolean first = true;

    sb.append("productBlob:");
    if (this.productBlob == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.productBlob, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("backgroundBlob:");
    if (this.backgroundBlob == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.backgroundBlob, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("logoBlob:");
    if (this.logoBlob == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.logoBlob, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adEntryJsonString:");
    if (this.adEntryJsonString == null) {
      sb.append("null");
    } else {
      sb.append(this.adEntryJsonString);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("copy:");
    if (this.copy == null) {
      sb.append("null");
    } else {
      sb.append(this.copy);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PreviewInfoStandardSchemeFactory implements SchemeFactory {
    public PreviewInfoStandardScheme getScheme() {
      return new PreviewInfoStandardScheme();
    }
  }

  private static class PreviewInfoStandardScheme extends StandardScheme<PreviewInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PreviewInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_BLOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productBlob = iprot.readBinary();
              struct.setProductBlobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BACKGROUND_BLOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backgroundBlob = iprot.readBinary();
              struct.setBackgroundBlobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGO_BLOB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.logoBlob = iprot.readBinary();
              struct.setLogoBlobIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AD_ENTRY_JSON_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adEntryJsonString = iprot.readString();
              struct.setAdEntryJsonStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COPY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.copy = iprot.readString();
              struct.setCopyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PreviewInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productBlob != null) {
        oprot.writeFieldBegin(PRODUCT_BLOB_FIELD_DESC);
        oprot.writeBinary(struct.productBlob);
        oprot.writeFieldEnd();
      }
      if (struct.backgroundBlob != null) {
        oprot.writeFieldBegin(BACKGROUND_BLOB_FIELD_DESC);
        oprot.writeBinary(struct.backgroundBlob);
        oprot.writeFieldEnd();
      }
      if (struct.logoBlob != null) {
        oprot.writeFieldBegin(LOGO_BLOB_FIELD_DESC);
        oprot.writeBinary(struct.logoBlob);
        oprot.writeFieldEnd();
      }
      if (struct.adEntryJsonString != null) {
        oprot.writeFieldBegin(AD_ENTRY_JSON_STRING_FIELD_DESC);
        oprot.writeString(struct.adEntryJsonString);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.copy != null) {
        oprot.writeFieldBegin(COPY_FIELD_DESC);
        oprot.writeString(struct.copy);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PreviewInfoTupleSchemeFactory implements SchemeFactory {
    public PreviewInfoTupleScheme getScheme() {
      return new PreviewInfoTupleScheme();
    }
  }

  private static class PreviewInfoTupleScheme extends TupleScheme<PreviewInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PreviewInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProductBlob()) {
        optionals.set(0);
      }
      if (struct.isSetBackgroundBlob()) {
        optionals.set(1);
      }
      if (struct.isSetLogoBlob()) {
        optionals.set(2);
      }
      if (struct.isSetAdEntryJsonString()) {
        optionals.set(3);
      }
      if (struct.isSetTitle()) {
        optionals.set(4);
      }
      if (struct.isSetCopy()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetProductBlob()) {
        oprot.writeBinary(struct.productBlob);
      }
      if (struct.isSetBackgroundBlob()) {
        oprot.writeBinary(struct.backgroundBlob);
      }
      if (struct.isSetLogoBlob()) {
        oprot.writeBinary(struct.logoBlob);
      }
      if (struct.isSetAdEntryJsonString()) {
        oprot.writeString(struct.adEntryJsonString);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetCopy()) {
        oprot.writeString(struct.copy);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PreviewInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.productBlob = iprot.readBinary();
        struct.setProductBlobIsSet(true);
      }
      if (incoming.get(1)) {
        struct.backgroundBlob = iprot.readBinary();
        struct.setBackgroundBlobIsSet(true);
      }
      if (incoming.get(2)) {
        struct.logoBlob = iprot.readBinary();
        struct.setLogoBlobIsSet(true);
      }
      if (incoming.get(3)) {
        struct.adEntryJsonString = iprot.readString();
        struct.setAdEntryJsonStringIsSet(true);
      }
      if (incoming.get(4)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.copy = iprot.readString();
        struct.setCopyIsSet(true);
      }
    }
  }

}

