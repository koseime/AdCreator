/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AdPreviewCreator_H
#define AdPreviewCreator_H

#include <thrift/TDispatchProcessor.h>
#include "AdPreviewCreator_types.h"



class AdPreviewCreatorIf {
 public:
  virtual ~AdPreviewCreatorIf() {}
  virtual void ping() = 0;
  virtual void createPreview(std::string& _return, const PreviewInfo& previewInfo) = 0;
};

class AdPreviewCreatorIfFactory {
 public:
  typedef AdPreviewCreatorIf Handler;

  virtual ~AdPreviewCreatorIfFactory() {}

  virtual AdPreviewCreatorIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AdPreviewCreatorIf* /* handler */) = 0;
};

class AdPreviewCreatorIfSingletonFactory : virtual public AdPreviewCreatorIfFactory {
 public:
  AdPreviewCreatorIfSingletonFactory(const boost::shared_ptr<AdPreviewCreatorIf>& iface) : iface_(iface) {}
  virtual ~AdPreviewCreatorIfSingletonFactory() {}

  virtual AdPreviewCreatorIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AdPreviewCreatorIf* /* handler */) {}

 protected:
  boost::shared_ptr<AdPreviewCreatorIf> iface_;
};

class AdPreviewCreatorNull : virtual public AdPreviewCreatorIf {
 public:
  virtual ~AdPreviewCreatorNull() {}
  void ping() {
    return;
  }
  void createPreview(std::string& /* _return */, const PreviewInfo& /* previewInfo */) {
    return;
  }
};


class AdPreviewCreator_ping_args {
 public:

  AdPreviewCreator_ping_args() {
  }

  virtual ~AdPreviewCreator_ping_args() throw() {}


  bool operator == (const AdPreviewCreator_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdPreviewCreator_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdPreviewCreator_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdPreviewCreator_ping_pargs {
 public:


  virtual ~AdPreviewCreator_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdPreviewCreator_ping_result {
 public:

  AdPreviewCreator_ping_result() {
  }

  virtual ~AdPreviewCreator_ping_result() throw() {}


  bool operator == (const AdPreviewCreator_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AdPreviewCreator_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdPreviewCreator_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdPreviewCreator_ping_presult {
 public:


  virtual ~AdPreviewCreator_ping_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AdPreviewCreator_createPreview_args__isset {
  _AdPreviewCreator_createPreview_args__isset() : previewInfo(false) {}
  bool previewInfo;
} _AdPreviewCreator_createPreview_args__isset;

class AdPreviewCreator_createPreview_args {
 public:

  AdPreviewCreator_createPreview_args() {
  }

  virtual ~AdPreviewCreator_createPreview_args() throw() {}

  PreviewInfo previewInfo;

  _AdPreviewCreator_createPreview_args__isset __isset;

  void __set_previewInfo(const PreviewInfo& val) {
    previewInfo = val;
  }

  bool operator == (const AdPreviewCreator_createPreview_args & rhs) const
  {
    if (!(previewInfo == rhs.previewInfo))
      return false;
    return true;
  }
  bool operator != (const AdPreviewCreator_createPreview_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdPreviewCreator_createPreview_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AdPreviewCreator_createPreview_pargs {
 public:


  virtual ~AdPreviewCreator_createPreview_pargs() throw() {}

  const PreviewInfo* previewInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdPreviewCreator_createPreview_result__isset {
  _AdPreviewCreator_createPreview_result__isset() : success(false) {}
  bool success;
} _AdPreviewCreator_createPreview_result__isset;

class AdPreviewCreator_createPreview_result {
 public:

  AdPreviewCreator_createPreview_result() : success() {
  }

  virtual ~AdPreviewCreator_createPreview_result() throw() {}

  std::string success;

  _AdPreviewCreator_createPreview_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const AdPreviewCreator_createPreview_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AdPreviewCreator_createPreview_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdPreviewCreator_createPreview_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AdPreviewCreator_createPreview_presult__isset {
  _AdPreviewCreator_createPreview_presult__isset() : success(false) {}
  bool success;
} _AdPreviewCreator_createPreview_presult__isset;

class AdPreviewCreator_createPreview_presult {
 public:


  virtual ~AdPreviewCreator_createPreview_presult() throw() {}

  std::string* success;

  _AdPreviewCreator_createPreview_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AdPreviewCreatorClient : virtual public AdPreviewCreatorIf {
 public:
  AdPreviewCreatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  AdPreviewCreatorClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  void createPreview(std::string& _return, const PreviewInfo& previewInfo);
  void send_createPreview(const PreviewInfo& previewInfo);
  void recv_createPreview(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AdPreviewCreatorProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<AdPreviewCreatorIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AdPreviewCreatorProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createPreview(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AdPreviewCreatorProcessor(boost::shared_ptr<AdPreviewCreatorIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &AdPreviewCreatorProcessor::process_ping;
    processMap_["createPreview"] = &AdPreviewCreatorProcessor::process_createPreview;
  }

  virtual ~AdPreviewCreatorProcessor() {}
};

class AdPreviewCreatorProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AdPreviewCreatorProcessorFactory(const ::boost::shared_ptr< AdPreviewCreatorIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< AdPreviewCreatorIfFactory > handlerFactory_;
};

class AdPreviewCreatorMultiface : virtual public AdPreviewCreatorIf {
 public:
  AdPreviewCreatorMultiface(std::vector<boost::shared_ptr<AdPreviewCreatorIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AdPreviewCreatorMultiface() {}
 protected:
  std::vector<boost::shared_ptr<AdPreviewCreatorIf> > ifaces_;
  AdPreviewCreatorMultiface() {}
  void add(boost::shared_ptr<AdPreviewCreatorIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  void createPreview(std::string& _return, const PreviewInfo& previewInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createPreview(_return, previewInfo);
    }
    ifaces_[i]->createPreview(_return, previewInfo);
    return;
  }

};



#endif
