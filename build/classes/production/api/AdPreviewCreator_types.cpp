/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AdPreviewCreator_types.h"

#include <algorithm>



const char* PreviewInfo::ascii_fingerprint = "873CB9E5A4C10A7ECE7476FD192F55EE";
const uint8_t PreviewInfo::binary_fingerprint[16] = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

uint32_t PreviewInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->productBlob);
          this->__isset.productBlob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->backgroundBlob);
          this->__isset.backgroundBlob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->logoBlob);
          this->__isset.logoBlob = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->adEntryJsonString);
          this->__isset.adEntryJsonString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->copy);
          this->__isset.copy = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PreviewInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PreviewInfo");

  xfer += oprot->writeFieldBegin("productBlob", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->productBlob);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backgroundBlob", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->backgroundBlob);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logoBlob", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->logoBlob);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adEntryJsonString", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->adEntryJsonString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("copy", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->copy);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PreviewInfo &a, PreviewInfo &b) {
  using ::std::swap;
  swap(a.productBlob, b.productBlob);
  swap(a.backgroundBlob, b.backgroundBlob);
  swap(a.logoBlob, b.logoBlob);
  swap(a.adEntryJsonString, b.adEntryJsonString);
  swap(a.title, b.title);
  swap(a.copy, b.copy);
  swap(a.__isset, b.__isset);
}


