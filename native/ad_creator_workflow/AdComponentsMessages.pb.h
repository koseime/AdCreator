// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdComponentsMessages.proto

#ifndef PROTOBUF_AdComponentsMessages_2eproto__INCLUDED
#define PROTOBUF_AdComponentsMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace kosei {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AdComponentsMessages_2eproto();
void protobuf_AssignDesc_AdComponentsMessages_2eproto();
void protobuf_ShutdownFile_AdComponentsMessages_2eproto();

class AdComponents;
class AdComponents_Ad;
class AdComponents_Meta;

enum AdComponents_Status {
  AdComponents_Status_EMPTY = 0,
  AdComponents_Status_RAW = 1,
  AdComponents_Status_IMAGE_RETRIEVED = 2,
  AdComponents_Status_AD_GENERATED = 3,
  AdComponents_Status_IMAGE_RETRIEVAL_FAILURE = 4
};
bool AdComponents_Status_IsValid(int value);
const AdComponents_Status AdComponents_Status_Status_MIN = AdComponents_Status_EMPTY;
const AdComponents_Status AdComponents_Status_Status_MAX = AdComponents_Status_IMAGE_RETRIEVAL_FAILURE;
const int AdComponents_Status_Status_ARRAYSIZE = AdComponents_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* AdComponents_Status_descriptor();
inline const ::std::string& AdComponents_Status_Name(AdComponents_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    AdComponents_Status_descriptor(), value);
}
inline bool AdComponents_Status_Parse(
    const ::std::string& name, AdComponents_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AdComponents_Status>(
    AdComponents_Status_descriptor(), name, value);
}
// ===================================================================

class AdComponents_Ad : public ::google::protobuf::Message {
 public:
  AdComponents_Ad();
  virtual ~AdComponents_Ad();

  AdComponents_Ad(const AdComponents_Ad& from);

  inline AdComponents_Ad& operator=(const AdComponents_Ad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdComponents_Ad& default_instance();

  void Swap(AdComponents_Ad* other);

  // implements Message ----------------------------------------------

  AdComponents_Ad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdComponents_Ad& from);
  void MergeFrom(const AdComponents_Ad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string layoutName = 1;
  inline bool has_layoutname() const;
  inline void clear_layoutname();
  static const int kLayoutNameFieldNumber = 1;
  inline const ::std::string& layoutname() const;
  inline void set_layoutname(const ::std::string& value);
  inline void set_layoutname(const char* value);
  inline void set_layoutname(const char* value, size_t size);
  inline ::std::string* mutable_layoutname();
  inline ::std::string* release_layoutname();
  inline void set_allocated_layoutname(::std::string* layoutname);

  // required bytes adJpg = 2;
  inline bool has_adjpg() const;
  inline void clear_adjpg();
  static const int kAdJpgFieldNumber = 2;
  inline const ::std::string& adjpg() const;
  inline void set_adjpg(const ::std::string& value);
  inline void set_adjpg(const char* value);
  inline void set_adjpg(const void* value, size_t size);
  inline ::std::string* mutable_adjpg();
  inline ::std::string* release_adjpg();
  inline void set_allocated_adjpg(::std::string* adjpg);

  // @@protoc_insertion_point(class_scope:com.kosei.proto.AdComponents.Ad)
 private:
  inline void set_has_layoutname();
  inline void clear_has_layoutname();
  inline void set_has_adjpg();
  inline void clear_has_adjpg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* layoutname_;
  ::std::string* adjpg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdComponentsMessages_2eproto();
  friend void protobuf_AssignDesc_AdComponentsMessages_2eproto();
  friend void protobuf_ShutdownFile_AdComponentsMessages_2eproto();

  void InitAsDefaultInstance();
  static AdComponents_Ad* default_instance_;
};
// -------------------------------------------------------------------

class AdComponents_Meta : public ::google::protobuf::Message {
 public:
  AdComponents_Meta();
  virtual ~AdComponents_Meta();

  AdComponents_Meta(const AdComponents_Meta& from);

  inline AdComponents_Meta& operator=(const AdComponents_Meta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdComponents_Meta& default_instance();

  void Swap(AdComponents_Meta* other);

  // implements Message ----------------------------------------------

  AdComponents_Meta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdComponents_Meta& from);
  void MergeFrom(const AdComponents_Meta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.kosei.proto.AdComponents.Meta)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_AdComponentsMessages_2eproto();
  friend void protobuf_AssignDesc_AdComponentsMessages_2eproto();
  friend void protobuf_ShutdownFile_AdComponentsMessages_2eproto();

  void InitAsDefaultInstance();
  static AdComponents_Meta* default_instance_;
};
// -------------------------------------------------------------------

class AdComponents : public ::google::protobuf::Message {
 public:
  AdComponents();
  virtual ~AdComponents();

  AdComponents(const AdComponents& from);

  inline AdComponents& operator=(const AdComponents& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdComponents& default_instance();

  void Swap(AdComponents* other);

  // implements Message ----------------------------------------------

  AdComponents* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdComponents& from);
  void MergeFrom(const AdComponents& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdComponents_Ad Ad;
  typedef AdComponents_Meta Meta;

  typedef AdComponents_Status Status;
  static const Status EMPTY = AdComponents_Status_EMPTY;
  static const Status RAW = AdComponents_Status_RAW;
  static const Status IMAGE_RETRIEVED = AdComponents_Status_IMAGE_RETRIEVED;
  static const Status AD_GENERATED = AdComponents_Status_AD_GENERATED;
  static const Status IMAGE_RETRIEVAL_FAILURE = AdComponents_Status_IMAGE_RETRIEVAL_FAILURE;
  static inline bool Status_IsValid(int value) {
    return AdComponents_Status_IsValid(value);
  }
  static const Status Status_MIN =
    AdComponents_Status_Status_MIN;
  static const Status Status_MAX =
    AdComponents_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    AdComponents_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return AdComponents_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return AdComponents_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return AdComponents_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required .com.kosei.proto.AdComponents.Status status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::com::kosei::proto::AdComponents_Status status() const;
  inline void set_status(::com::kosei::proto::AdComponents_Status value);

  // optional bytes productJpg = 5;
  inline bool has_productjpg() const;
  inline void clear_productjpg();
  static const int kProductJpgFieldNumber = 5;
  inline const ::std::string& productjpg() const;
  inline void set_productjpg(const ::std::string& value);
  inline void set_productjpg(const char* value);
  inline void set_productjpg(const void* value, size_t size);
  inline ::std::string* mutable_productjpg();
  inline ::std::string* release_productjpg();
  inline void set_allocated_productjpg(::std::string* productjpg);

  // optional string manifest = 6;
  inline bool has_manifest() const;
  inline void clear_manifest();
  static const int kManifestFieldNumber = 6;
  inline const ::std::string& manifest() const;
  inline void set_manifest(const ::std::string& value);
  inline void set_manifest(const char* value);
  inline void set_manifest(const char* value, size_t size);
  inline ::std::string* mutable_manifest();
  inline ::std::string* release_manifest();
  inline void set_allocated_manifest(::std::string* manifest);

  // repeated .com.kosei.proto.AdComponents.Ad generatedAds = 7;
  inline int generatedads_size() const;
  inline void clear_generatedads();
  static const int kGeneratedAdsFieldNumber = 7;
  inline const ::com::kosei::proto::AdComponents_Ad& generatedads(int index) const;
  inline ::com::kosei::proto::AdComponents_Ad* mutable_generatedads(int index);
  inline ::com::kosei::proto::AdComponents_Ad* add_generatedads();
  inline const ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Ad >&
      generatedads() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Ad >*
      mutable_generatedads();

  // repeated .com.kosei.proto.AdComponents.Meta meta = 8;
  inline int meta_size() const;
  inline void clear_meta();
  static const int kMetaFieldNumber = 8;
  inline const ::com::kosei::proto::AdComponents_Meta& meta(int index) const;
  inline ::com::kosei::proto::AdComponents_Meta* mutable_meta(int index);
  inline ::com::kosei::proto::AdComponents_Meta* add_meta();
  inline const ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Meta >&
      meta() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Meta >*
      mutable_meta();

  // @@protoc_insertion_point(class_scope:com.kosei.proto.AdComponents)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_productjpg();
  inline void clear_has_productjpg();
  inline void set_has_manifest();
  inline void clear_has_manifest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* id_;
  ::std::string* description_;
  ::std::string* title_;
  ::std::string* productjpg_;
  ::std::string* manifest_;
  ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Ad > generatedads_;
  ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Meta > meta_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_AdComponentsMessages_2eproto();
  friend void protobuf_AssignDesc_AdComponentsMessages_2eproto();
  friend void protobuf_ShutdownFile_AdComponentsMessages_2eproto();

  void InitAsDefaultInstance();
  static AdComponents* default_instance_;
};
// ===================================================================


// ===================================================================

// AdComponents_Ad

// required string layoutName = 1;
inline bool AdComponents_Ad::has_layoutname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdComponents_Ad::set_has_layoutname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdComponents_Ad::clear_has_layoutname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdComponents_Ad::clear_layoutname() {
  if (layoutname_ != &::google::protobuf::internal::kEmptyString) {
    layoutname_->clear();
  }
  clear_has_layoutname();
}
inline const ::std::string& AdComponents_Ad::layoutname() const {
  return *layoutname_;
}
inline void AdComponents_Ad::set_layoutname(const ::std::string& value) {
  set_has_layoutname();
  if (layoutname_ == &::google::protobuf::internal::kEmptyString) {
    layoutname_ = new ::std::string;
  }
  layoutname_->assign(value);
}
inline void AdComponents_Ad::set_layoutname(const char* value) {
  set_has_layoutname();
  if (layoutname_ == &::google::protobuf::internal::kEmptyString) {
    layoutname_ = new ::std::string;
  }
  layoutname_->assign(value);
}
inline void AdComponents_Ad::set_layoutname(const char* value, size_t size) {
  set_has_layoutname();
  if (layoutname_ == &::google::protobuf::internal::kEmptyString) {
    layoutname_ = new ::std::string;
  }
  layoutname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents_Ad::mutable_layoutname() {
  set_has_layoutname();
  if (layoutname_ == &::google::protobuf::internal::kEmptyString) {
    layoutname_ = new ::std::string;
  }
  return layoutname_;
}
inline ::std::string* AdComponents_Ad::release_layoutname() {
  clear_has_layoutname();
  if (layoutname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = layoutname_;
    layoutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents_Ad::set_allocated_layoutname(::std::string* layoutname) {
  if (layoutname_ != &::google::protobuf::internal::kEmptyString) {
    delete layoutname_;
  }
  if (layoutname) {
    set_has_layoutname();
    layoutname_ = layoutname;
  } else {
    clear_has_layoutname();
    layoutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes adJpg = 2;
inline bool AdComponents_Ad::has_adjpg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdComponents_Ad::set_has_adjpg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdComponents_Ad::clear_has_adjpg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdComponents_Ad::clear_adjpg() {
  if (adjpg_ != &::google::protobuf::internal::kEmptyString) {
    adjpg_->clear();
  }
  clear_has_adjpg();
}
inline const ::std::string& AdComponents_Ad::adjpg() const {
  return *adjpg_;
}
inline void AdComponents_Ad::set_adjpg(const ::std::string& value) {
  set_has_adjpg();
  if (adjpg_ == &::google::protobuf::internal::kEmptyString) {
    adjpg_ = new ::std::string;
  }
  adjpg_->assign(value);
}
inline void AdComponents_Ad::set_adjpg(const char* value) {
  set_has_adjpg();
  if (adjpg_ == &::google::protobuf::internal::kEmptyString) {
    adjpg_ = new ::std::string;
  }
  adjpg_->assign(value);
}
inline void AdComponents_Ad::set_adjpg(const void* value, size_t size) {
  set_has_adjpg();
  if (adjpg_ == &::google::protobuf::internal::kEmptyString) {
    adjpg_ = new ::std::string;
  }
  adjpg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents_Ad::mutable_adjpg() {
  set_has_adjpg();
  if (adjpg_ == &::google::protobuf::internal::kEmptyString) {
    adjpg_ = new ::std::string;
  }
  return adjpg_;
}
inline ::std::string* AdComponents_Ad::release_adjpg() {
  clear_has_adjpg();
  if (adjpg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adjpg_;
    adjpg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents_Ad::set_allocated_adjpg(::std::string* adjpg) {
  if (adjpg_ != &::google::protobuf::internal::kEmptyString) {
    delete adjpg_;
  }
  if (adjpg) {
    set_has_adjpg();
    adjpg_ = adjpg;
  } else {
    clear_has_adjpg();
    adjpg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdComponents_Meta

// required string key = 1;
inline bool AdComponents_Meta::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdComponents_Meta::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdComponents_Meta::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdComponents_Meta::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& AdComponents_Meta::key() const {
  return *key_;
}
inline void AdComponents_Meta::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AdComponents_Meta::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void AdComponents_Meta::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents_Meta::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* AdComponents_Meta::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents_Meta::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool AdComponents_Meta::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdComponents_Meta::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdComponents_Meta::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdComponents_Meta::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& AdComponents_Meta::value() const {
  return *value_;
}
inline void AdComponents_Meta::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AdComponents_Meta::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void AdComponents_Meta::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents_Meta::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* AdComponents_Meta::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents_Meta::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdComponents

// required string id = 1;
inline bool AdComponents::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdComponents::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdComponents::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdComponents::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& AdComponents::id() const {
  return *id_;
}
inline void AdComponents::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AdComponents::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void AdComponents::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* AdComponents::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string description = 2;
inline bool AdComponents::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdComponents::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdComponents::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdComponents::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& AdComponents::description() const {
  return *description_;
}
inline void AdComponents::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void AdComponents::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void AdComponents::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* AdComponents::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 3;
inline bool AdComponents::has_title() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdComponents::set_has_title() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdComponents::clear_has_title() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdComponents::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& AdComponents::title() const {
  return *title_;
}
inline void AdComponents::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AdComponents::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AdComponents::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* AdComponents::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .com.kosei.proto.AdComponents.Status status = 4;
inline bool AdComponents::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdComponents::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdComponents::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdComponents::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::com::kosei::proto::AdComponents_Status AdComponents::status() const {
  return static_cast< ::com::kosei::proto::AdComponents_Status >(status_);
}
inline void AdComponents::set_status(::com::kosei::proto::AdComponents_Status value) {
  assert(::com::kosei::proto::AdComponents_Status_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional bytes productJpg = 5;
inline bool AdComponents::has_productjpg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdComponents::set_has_productjpg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdComponents::clear_has_productjpg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdComponents::clear_productjpg() {
  if (productjpg_ != &::google::protobuf::internal::kEmptyString) {
    productjpg_->clear();
  }
  clear_has_productjpg();
}
inline const ::std::string& AdComponents::productjpg() const {
  return *productjpg_;
}
inline void AdComponents::set_productjpg(const ::std::string& value) {
  set_has_productjpg();
  if (productjpg_ == &::google::protobuf::internal::kEmptyString) {
    productjpg_ = new ::std::string;
  }
  productjpg_->assign(value);
}
inline void AdComponents::set_productjpg(const char* value) {
  set_has_productjpg();
  if (productjpg_ == &::google::protobuf::internal::kEmptyString) {
    productjpg_ = new ::std::string;
  }
  productjpg_->assign(value);
}
inline void AdComponents::set_productjpg(const void* value, size_t size) {
  set_has_productjpg();
  if (productjpg_ == &::google::protobuf::internal::kEmptyString) {
    productjpg_ = new ::std::string;
  }
  productjpg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents::mutable_productjpg() {
  set_has_productjpg();
  if (productjpg_ == &::google::protobuf::internal::kEmptyString) {
    productjpg_ = new ::std::string;
  }
  return productjpg_;
}
inline ::std::string* AdComponents::release_productjpg() {
  clear_has_productjpg();
  if (productjpg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productjpg_;
    productjpg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents::set_allocated_productjpg(::std::string* productjpg) {
  if (productjpg_ != &::google::protobuf::internal::kEmptyString) {
    delete productjpg_;
  }
  if (productjpg) {
    set_has_productjpg();
    productjpg_ = productjpg;
  } else {
    clear_has_productjpg();
    productjpg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string manifest = 6;
inline bool AdComponents::has_manifest() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdComponents::set_has_manifest() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdComponents::clear_has_manifest() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdComponents::clear_manifest() {
  if (manifest_ != &::google::protobuf::internal::kEmptyString) {
    manifest_->clear();
  }
  clear_has_manifest();
}
inline const ::std::string& AdComponents::manifest() const {
  return *manifest_;
}
inline void AdComponents::set_manifest(const ::std::string& value) {
  set_has_manifest();
  if (manifest_ == &::google::protobuf::internal::kEmptyString) {
    manifest_ = new ::std::string;
  }
  manifest_->assign(value);
}
inline void AdComponents::set_manifest(const char* value) {
  set_has_manifest();
  if (manifest_ == &::google::protobuf::internal::kEmptyString) {
    manifest_ = new ::std::string;
  }
  manifest_->assign(value);
}
inline void AdComponents::set_manifest(const char* value, size_t size) {
  set_has_manifest();
  if (manifest_ == &::google::protobuf::internal::kEmptyString) {
    manifest_ = new ::std::string;
  }
  manifest_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdComponents::mutable_manifest() {
  set_has_manifest();
  if (manifest_ == &::google::protobuf::internal::kEmptyString) {
    manifest_ = new ::std::string;
  }
  return manifest_;
}
inline ::std::string* AdComponents::release_manifest() {
  clear_has_manifest();
  if (manifest_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = manifest_;
    manifest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdComponents::set_allocated_manifest(::std::string* manifest) {
  if (manifest_ != &::google::protobuf::internal::kEmptyString) {
    delete manifest_;
  }
  if (manifest) {
    set_has_manifest();
    manifest_ = manifest;
  } else {
    clear_has_manifest();
    manifest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .com.kosei.proto.AdComponents.Ad generatedAds = 7;
inline int AdComponents::generatedads_size() const {
  return generatedads_.size();
}
inline void AdComponents::clear_generatedads() {
  generatedads_.Clear();
}
inline const ::com::kosei::proto::AdComponents_Ad& AdComponents::generatedads(int index) const {
  return generatedads_.Get(index);
}
inline ::com::kosei::proto::AdComponents_Ad* AdComponents::mutable_generatedads(int index) {
  return generatedads_.Mutable(index);
}
inline ::com::kosei::proto::AdComponents_Ad* AdComponents::add_generatedads() {
  return generatedads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Ad >&
AdComponents::generatedads() const {
  return generatedads_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Ad >*
AdComponents::mutable_generatedads() {
  return &generatedads_;
}

// repeated .com.kosei.proto.AdComponents.Meta meta = 8;
inline int AdComponents::meta_size() const {
  return meta_.size();
}
inline void AdComponents::clear_meta() {
  meta_.Clear();
}
inline const ::com::kosei::proto::AdComponents_Meta& AdComponents::meta(int index) const {
  return meta_.Get(index);
}
inline ::com::kosei::proto::AdComponents_Meta* AdComponents::mutable_meta(int index) {
  return meta_.Mutable(index);
}
inline ::com::kosei::proto::AdComponents_Meta* AdComponents::add_meta() {
  return meta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Meta >&
AdComponents::meta() const {
  return meta_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::kosei::proto::AdComponents_Meta >*
AdComponents::mutable_meta() {
  return &meta_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kosei
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::kosei::proto::AdComponents_Status>() {
  return ::com::kosei::proto::AdComponents_Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AdComponentsMessages_2eproto__INCLUDED
