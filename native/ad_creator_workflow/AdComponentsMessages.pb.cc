// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdComponentsMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AdComponentsMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace kosei {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* AdComponents_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdComponents_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdComponents_Ad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdComponents_Ad_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdComponents_Meta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdComponents_Meta_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AdComponents_Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_AdComponentsMessages_2eproto() {
  protobuf_AddDesc_AdComponentsMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "AdComponentsMessages.proto");
  GOOGLE_CHECK(file != NULL);
  AdComponents_descriptor_ = file->message_type(0);
  static const int AdComponents_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, productjpg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, manifest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, generatedads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, meta_),
  };
  AdComponents_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdComponents_descriptor_,
      AdComponents::default_instance_,
      AdComponents_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdComponents));
  AdComponents_Ad_descriptor_ = AdComponents_descriptor_->nested_type(0);
  static const int AdComponents_Ad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Ad, layoutname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Ad, adjpg_),
  };
  AdComponents_Ad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdComponents_Ad_descriptor_,
      AdComponents_Ad::default_instance_,
      AdComponents_Ad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Ad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Ad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdComponents_Ad));
  AdComponents_Meta_descriptor_ = AdComponents_descriptor_->nested_type(1);
  static const int AdComponents_Meta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Meta, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Meta, value_),
  };
  AdComponents_Meta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdComponents_Meta_descriptor_,
      AdComponents_Meta::default_instance_,
      AdComponents_Meta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Meta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdComponents_Meta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdComponents_Meta));
  AdComponents_Status_descriptor_ = AdComponents_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_AdComponentsMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdComponents_descriptor_, &AdComponents::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdComponents_Ad_descriptor_, &AdComponents_Ad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdComponents_Meta_descriptor_, &AdComponents_Meta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_AdComponentsMessages_2eproto() {
  delete AdComponents::default_instance_;
  delete AdComponents_reflection_;
  delete AdComponents_Ad::default_instance_;
  delete AdComponents_Ad_reflection_;
  delete AdComponents_Meta::default_instance_;
  delete AdComponents_Meta_reflection_;
}

void protobuf_AddDesc_AdComponentsMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032AdComponentsMessages.proto\022\017com.kosei."
    "proto\"\263\003\n\014AdComponents\022\n\n\002id\030\001 \002(\t\022\023\n\013de"
    "scription\030\002 \002(\t\022\r\n\005title\030\003 \001(\t\0224\n\006status"
    "\030\004 \002(\0162$.com.kosei.proto.AdComponents.St"
    "atus\022\022\n\nproductJpg\030\005 \001(\014\022\020\n\010manifest\030\006 \001"
    "(\t\0226\n\014generatedAds\030\007 \003(\0132 .com.kosei.pro"
    "to.AdComponents.Ad\0220\n\004meta\030\010 \003(\0132\".com.k"
    "osei.proto.AdComponents.Meta\032\'\n\002Ad\022\022\n\nla"
    "youtName\030\001 \002(\t\022\r\n\005adJpg\030\002 \002(\014\032\"\n\004Meta\022\013\n"
    "\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\014\"`\n\006Status\022\t\n\005E"
    "MPTY\020\000\022\007\n\003RAW\020\001\022\023\n\017IMAGE_RETRIEVED\020\002\022\020\n\014"
    "AD_GENERATED\020\003\022\033\n\027IMAGE_RETRIEVAL_FAILUR"
    "E\020\004", 483);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "AdComponentsMessages.proto", &protobuf_RegisterTypes);
  AdComponents::default_instance_ = new AdComponents();
  AdComponents_Ad::default_instance_ = new AdComponents_Ad();
  AdComponents_Meta::default_instance_ = new AdComponents_Meta();
  AdComponents::default_instance_->InitAsDefaultInstance();
  AdComponents_Ad::default_instance_->InitAsDefaultInstance();
  AdComponents_Meta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AdComponentsMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AdComponentsMessages_2eproto {
  StaticDescriptorInitializer_AdComponentsMessages_2eproto() {
    protobuf_AddDesc_AdComponentsMessages_2eproto();
  }
} static_descriptor_initializer_AdComponentsMessages_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* AdComponents_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdComponents_Status_descriptor_;
}
bool AdComponents_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const AdComponents_Status AdComponents::EMPTY;
const AdComponents_Status AdComponents::RAW;
const AdComponents_Status AdComponents::IMAGE_RETRIEVED;
const AdComponents_Status AdComponents::AD_GENERATED;
const AdComponents_Status AdComponents::IMAGE_RETRIEVAL_FAILURE;
const AdComponents_Status AdComponents::Status_MIN;
const AdComponents_Status AdComponents::Status_MAX;
const int AdComponents::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int AdComponents_Ad::kLayoutNameFieldNumber;
const int AdComponents_Ad::kAdJpgFieldNumber;
#endif  // !_MSC_VER

AdComponents_Ad::AdComponents_Ad()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdComponents_Ad::InitAsDefaultInstance() {
}

AdComponents_Ad::AdComponents_Ad(const AdComponents_Ad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdComponents_Ad::SharedCtor() {
  _cached_size_ = 0;
  layoutname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  adjpg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdComponents_Ad::~AdComponents_Ad() {
  SharedDtor();
}

void AdComponents_Ad::SharedDtor() {
  if (layoutname_ != &::google::protobuf::internal::kEmptyString) {
    delete layoutname_;
  }
  if (adjpg_ != &::google::protobuf::internal::kEmptyString) {
    delete adjpg_;
  }
  if (this != default_instance_) {
  }
}

void AdComponents_Ad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdComponents_Ad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdComponents_Ad_descriptor_;
}

const AdComponents_Ad& AdComponents_Ad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdComponentsMessages_2eproto();
  return *default_instance_;
}

AdComponents_Ad* AdComponents_Ad::default_instance_ = NULL;

AdComponents_Ad* AdComponents_Ad::New() const {
  return new AdComponents_Ad;
}

void AdComponents_Ad::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_layoutname()) {
      if (layoutname_ != &::google::protobuf::internal::kEmptyString) {
        layoutname_->clear();
      }
    }
    if (has_adjpg()) {
      if (adjpg_ != &::google::protobuf::internal::kEmptyString) {
        adjpg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdComponents_Ad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string layoutName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layoutname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->layoutname().data(), this->layoutname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_adJpg;
        break;
      }

      // required bytes adJpg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adJpg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_adjpg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdComponents_Ad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string layoutName = 1;
  if (has_layoutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layoutname().data(), this->layoutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->layoutname(), output);
  }

  // required bytes adJpg = 2;
  if (has_adjpg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->adjpg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdComponents_Ad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string layoutName = 1;
  if (has_layoutname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->layoutname().data(), this->layoutname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->layoutname(), target);
  }

  // required bytes adJpg = 2;
  if (has_adjpg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->adjpg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdComponents_Ad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string layoutName = 1;
    if (has_layoutname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layoutname());
    }

    // required bytes adJpg = 2;
    if (has_adjpg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->adjpg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdComponents_Ad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdComponents_Ad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdComponents_Ad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdComponents_Ad::MergeFrom(const AdComponents_Ad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layoutname()) {
      set_layoutname(from.layoutname());
    }
    if (from.has_adjpg()) {
      set_adjpg(from.adjpg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdComponents_Ad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdComponents_Ad::CopyFrom(const AdComponents_Ad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdComponents_Ad::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdComponents_Ad::Swap(AdComponents_Ad* other) {
  if (other != this) {
    std::swap(layoutname_, other->layoutname_);
    std::swap(adjpg_, other->adjpg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdComponents_Ad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdComponents_Ad_descriptor_;
  metadata.reflection = AdComponents_Ad_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdComponents_Meta::kKeyFieldNumber;
const int AdComponents_Meta::kValueFieldNumber;
#endif  // !_MSC_VER

AdComponents_Meta::AdComponents_Meta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdComponents_Meta::InitAsDefaultInstance() {
}

AdComponents_Meta::AdComponents_Meta(const AdComponents_Meta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdComponents_Meta::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdComponents_Meta::~AdComponents_Meta() {
  SharedDtor();
}

void AdComponents_Meta::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AdComponents_Meta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdComponents_Meta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdComponents_Meta_descriptor_;
}

const AdComponents_Meta& AdComponents_Meta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdComponentsMessages_2eproto();
  return *default_instance_;
}

AdComponents_Meta* AdComponents_Meta::default_instance_ = NULL;

AdComponents_Meta* AdComponents_Meta::New() const {
  return new AdComponents_Meta;
}

void AdComponents_Meta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdComponents_Meta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdComponents_Meta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdComponents_Meta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdComponents_Meta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdComponents_Meta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdComponents_Meta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdComponents_Meta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdComponents_Meta::MergeFrom(const AdComponents_Meta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdComponents_Meta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdComponents_Meta::CopyFrom(const AdComponents_Meta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdComponents_Meta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdComponents_Meta::Swap(AdComponents_Meta* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdComponents_Meta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdComponents_Meta_descriptor_;
  metadata.reflection = AdComponents_Meta_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdComponents::kIdFieldNumber;
const int AdComponents::kDescriptionFieldNumber;
const int AdComponents::kTitleFieldNumber;
const int AdComponents::kStatusFieldNumber;
const int AdComponents::kProductJpgFieldNumber;
const int AdComponents::kManifestFieldNumber;
const int AdComponents::kGeneratedAdsFieldNumber;
const int AdComponents::kMetaFieldNumber;
#endif  // !_MSC_VER

AdComponents::AdComponents()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdComponents::InitAsDefaultInstance() {
}

AdComponents::AdComponents(const AdComponents& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdComponents::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  productjpg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manifest_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdComponents::~AdComponents() {
  SharedDtor();
}

void AdComponents::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (productjpg_ != &::google::protobuf::internal::kEmptyString) {
    delete productjpg_;
  }
  if (manifest_ != &::google::protobuf::internal::kEmptyString) {
    delete manifest_;
  }
  if (this != default_instance_) {
  }
}

void AdComponents::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdComponents::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdComponents_descriptor_;
}

const AdComponents& AdComponents::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_AdComponentsMessages_2eproto();
  return *default_instance_;
}

AdComponents* AdComponents::default_instance_ = NULL;

AdComponents* AdComponents::New() const {
  return new AdComponents;
}

void AdComponents::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    status_ = 0;
    if (has_productjpg()) {
      if (productjpg_ != &::google::protobuf::internal::kEmptyString) {
        productjpg_->clear();
      }
    }
    if (has_manifest()) {
      if (manifest_ != &::google::protobuf::internal::kEmptyString) {
        manifest_->clear();
      }
    }
  }
  generatedads_.Clear();
  meta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdComponents::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // required string description = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required .com.kosei.proto.AdComponents.Status status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::kosei::proto::AdComponents_Status_IsValid(value)) {
            set_status(static_cast< ::com::kosei::proto::AdComponents_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_productJpg;
        break;
      }

      // optional bytes productJpg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productJpg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_productjpg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_manifest;
        break;
      }

      // optional string manifest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manifest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manifest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manifest().data(), this->manifest().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_generatedAds;
        break;
      }

      // repeated .com.kosei.proto.AdComponents.Ad generatedAds = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_generatedAds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_generatedads()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_generatedAds;
        if (input->ExpectTag(66)) goto parse_meta;
        break;
      }

      // repeated .com.kosei.proto.AdComponents.Meta meta = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_meta;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdComponents::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->description(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // required .com.kosei.proto.AdComponents.Status status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional bytes productJpg = 5;
  if (has_productjpg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->productjpg(), output);
  }

  // optional string manifest = 6;
  if (has_manifest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifest().data(), this->manifest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->manifest(), output);
  }

  // repeated .com.kosei.proto.AdComponents.Ad generatedAds = 7;
  for (int i = 0; i < this->generatedads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->generatedads(i), output);
  }

  // repeated .com.kosei.proto.AdComponents.Meta meta = 8;
  for (int i = 0; i < this->meta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->meta(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdComponents::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // required .com.kosei.proto.AdComponents.Status status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional bytes productJpg = 5;
  if (has_productjpg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->productjpg(), target);
  }

  // optional string manifest = 6;
  if (has_manifest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manifest().data(), this->manifest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->manifest(), target);
  }

  // repeated .com.kosei.proto.AdComponents.Ad generatedAds = 7;
  for (int i = 0; i < this->generatedads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->generatedads(i), target);
  }

  // repeated .com.kosei.proto.AdComponents.Meta meta = 8;
  for (int i = 0; i < this->meta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->meta(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdComponents::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required .com.kosei.proto.AdComponents.Status status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional bytes productJpg = 5;
    if (has_productjpg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->productjpg());
    }

    // optional string manifest = 6;
    if (has_manifest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manifest());
    }

  }
  // repeated .com.kosei.proto.AdComponents.Ad generatedAds = 7;
  total_size += 1 * this->generatedads_size();
  for (int i = 0; i < this->generatedads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->generatedads(i));
  }

  // repeated .com.kosei.proto.AdComponents.Meta meta = 8;
  total_size += 1 * this->meta_size();
  for (int i = 0; i < this->meta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meta(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdComponents::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdComponents* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdComponents*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdComponents::MergeFrom(const AdComponents& from) {
  GOOGLE_CHECK_NE(&from, this);
  generatedads_.MergeFrom(from.generatedads_);
  meta_.MergeFrom(from.meta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_productjpg()) {
      set_productjpg(from.productjpg());
    }
    if (from.has_manifest()) {
      set_manifest(from.manifest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdComponents::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdComponents::CopyFrom(const AdComponents& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdComponents::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < generatedads_size(); i++) {
    if (!this->generatedads(i).IsInitialized()) return false;
  }
  for (int i = 0; i < meta_size(); i++) {
    if (!this->meta(i).IsInitialized()) return false;
  }
  return true;
}

void AdComponents::Swap(AdComponents* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(description_, other->description_);
    std::swap(title_, other->title_);
    std::swap(status_, other->status_);
    std::swap(productjpg_, other->productjpg_);
    std::swap(manifest_, other->manifest_);
    generatedads_.Swap(&other->generatedads_);
    meta_.Swap(&other->meta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdComponents::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdComponents_descriptor_;
  metadata.reflection = AdComponents_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace kosei
}  // namespace com

// @@protoc_insertion_point(global_scope)
